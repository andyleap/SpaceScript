using SpaceEngineers.Game.ModAPI.Ingame;
using Sandbox.ModAPI.Ingame;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Sandbox.ModAPI.Interfaces;

namespace ScriptLCD.SpaceScript.Types
{
    public class Block : IType, IFields
    {
		Sandbox.ModAPI.Ingame.IMyTerminalBlock block;
        public Block(Sandbox.ModAPI.Ingame.IMyTerminalBlock block)
        {
            this.block = block;
        }

        public IType GetField(Scope scope, State state, string name)
        {
			if(name == "CustomName")
			{
				return new String(block.CustomName);
			}
			#region Autogenerated Interface Layer
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyAirVent)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyAirVent;
				if (name == "IsPressurized")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("IsPressurized expects 0 parameters"); }
						return new Bool(b.IsPressurized());
					});
				}
				if (name == "GetOxygenLevel")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("GetOxygenLevel expects 0 parameters"); }
						return new Float(b.GetOxygenLevel());
					});
				}
				if (name == "CanPressurize")
				{
					return new Bool(b.CanPressurize);
				}
				if (name == "IsDepressurizing")
				{
					return new Bool(b.IsDepressurizing);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyGravityGeneratorBase)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyGravityGeneratorBase;
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyGravityGenerator)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyGravityGenerator;
				if (name == "FieldWidth")
				{
					return new Float(b.FieldWidth);
				}
				if (name == "FieldHeight")
				{
					return new Float(b.FieldHeight);
				}
				if (name == "FieldDepth")
				{
					return new Float(b.FieldDepth);
				}
				if (name == "Gravity")
				{
					return new Float(b.Gravity);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyGravityGeneratorSphere)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyGravityGeneratorSphere;
				if (name == "Radius")
				{
					return new Float(b.Radius);
				}
				if (name == "Gravity")
				{
					return new Float(b.Gravity);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyInteriorLight)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyInteriorLight;
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyLandingGear)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyLandingGear;
				/*
					if(name == "GetAttachedEntity")
					{
						return new NativeFunction(args => {
							if(args.Count != 0){throw new Exception("GetAttachedEntity expects 0 parameters");}
				System.Exception: Missing Type: VRage.ModAPI.IMyEntity
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 89
				*/
				if (name == "BreakForce")
				{
					return new Float(b.BreakForce);
				}
				if (name == "IsLocked")
				{
					return new Bool(b.IsLocked);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyMedicalRoom)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyMedicalRoom;
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyShipMergeBlock)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyShipMergeBlock;
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMySoundBlock)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMySoundBlock;
				if (name == "Volume")
				{
					return new Float(b.Volume);
				}
				if (name == "Range")
				{
					return new Float(b.Range);
				}
				if (name == "IsSoundSelected")
				{
					return new Bool(b.IsSoundSelected);
				}
				if (name == "LoopPeriod")
				{
					return new Float(b.LoopPeriod);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyVirtualMass)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyVirtualMass;
				if (name == "VirtualMass")
				{
					return new Float(b.VirtualMass);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMySpaceBall)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMySpaceBall;
				if (name == "Friction")
				{
					return new Float(b.Friction);
				}
				if (name == "Restitution")
				{
					return new Float(b.Restitution);
				}
				if (name == "IsBroadcasting")
				{
					return new Bool(b.IsBroadcasting);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyTimerBlock)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyTimerBlock;
				if (name == "IsCountingDown")
				{
					return new Bool(b.IsCountingDown);
				}
				if (name == "TriggerDelay")
				{
					return new Float(b.TriggerDelay);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyLargeConveyorTurretBase)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyLargeConveyorTurretBase;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyLargeGatlingTurret)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyLargeGatlingTurret;
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyLargeInteriorTurret)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyLargeInteriorTurret;
			}
			if (block is SpaceEngineers.Game.ModAPI.Ingame.IMyLargeMissileTurret)
			{
				var b = block as SpaceEngineers.Game.ModAPI.Ingame.IMyLargeMissileTurret;
			}
			if (block is Sandbox.ModAPI.Ingame.IMyFunctionalBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyFunctionalBlock;
				if (name == "RequestEnable")
				{
					return new NativeFunction(args => {
						if (args.Count != 1) { throw new Exception("RequestEnable expects 1 parameters"); }
						if (!(args[0] is Bool)) { throw new Exception("RequestEnable expects argument 0 to be of type Bool"); }
						b.RequestEnable((args[0] as Bool).Value);
						return new Bool(true);
					});
				}
				if (name == "Enabled")
				{
					return new Bool(b.Enabled);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyGyro)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyGyro;
				if (name == "GyroPower")
				{
					return new Float(b.GyroPower);
				}
				if (name == "GyroOverride")
				{
					return new Bool(b.GyroOverride);
				}
				if (name == "Yaw")
				{
					return new Float(b.Yaw);
				}
				if (name == "Pitch")
				{
					return new Float(b.Pitch);
				}
				if (name == "Roll")
				{
					return new Float(b.Roll);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyLaserAntenna)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyLaserAntenna;
				if (name == "SetTargetCoords")
				{
					return new NativeFunction(args => {
						if (args.Count != 1) { throw new Exception("SetTargetCoords expects 1 parameters"); }
						if (!(args[0] is String)) { throw new Exception("SetTargetCoords expects argument 0 to be of type String"); }
						b.SetTargetCoords((args[0] as String).Value);
						return new Bool(true);
					});
				}
				if (name == "Connect")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("Connect expects 0 parameters"); }
						b.Connect();
						return new Bool(true);
					});
				}
				/*
					if(name == "TargetCoords")
					{
				System.Exception: Missing Type: VRageMath.Vector3D
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 96
				*/
				if (name == "IsPermanent")
				{
					return new Bool(b.IsPermanent);
				}
				if (name == "IsOutsideLimits")
				{
					return new Bool(b.IsOutsideLimits);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyDoor)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyDoor;
				if (name == "Open")
				{
					return new Bool(b.Open);
				}
				if (name == "OpenRatio")
				{
					return new Float(b.OpenRatio);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyMotorBase)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyMotorBase;
				if (name == "Attach")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("Attach expects 0 parameters"); }
						b.Attach();
						return new Bool(true);
					});
				}
				if (name == "Detach")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("Detach expects 0 parameters"); }
						b.Detach();
						return new Bool(true);
					});
				}
				if (name == "IsAttached")
				{
					return new Bool(b.IsAttached);
				}
				if (name == "PendingAttachment")
				{
					return new Bool(b.PendingAttachment);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyMotorStator)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyMotorStator;
				if (name == "IsLocked")
				{
					return new Bool(b.IsLocked);
				}
				if (name == "Angle")
				{
					return new Float(b.Angle);
				}
				if (name == "Torque")
				{
					return new Float(b.Torque);
				}
				if (name == "BrakingTorque")
				{
					return new Float(b.BrakingTorque);
				}
				if (name == "Velocity")
				{
					return new Float(b.Velocity);
				}
				if (name == "LowerLimit")
				{
					return new Float(b.LowerLimit);
				}
				if (name == "UpperLimit")
				{
					return new Float(b.UpperLimit);
				}
				if (name == "Displacement")
				{
					return new Float(b.Displacement);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyOxygenGenerator)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyOxygenGenerator;
				if (name == "AutoRefill")
				{
					return new Bool(b.AutoRefill);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyPistonBase)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyPistonBase;
				if (name == "Attach")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("Attach expects 0 parameters"); }
						b.Attach();
						return new Bool(true);
					});
				}
				if (name == "Detach")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("Detach expects 0 parameters"); }
						b.Detach();
						return new Bool(true);
					});
				}
				if (name == "Velocity")
				{
					return new Float(b.Velocity);
				}
				if (name == "MinLimit")
				{
					return new Float(b.MinLimit);
				}
				if (name == "MaxLimit")
				{
					return new Float(b.MaxLimit);
				}
				if (name == "CurrentPosition")
				{
					return new Float(b.CurrentPosition);
				}
				/*
					if(name == "Status")
					{
				System.Exception: Missing Type: Sandbox.ModAPI.Ingame.PistonStatus
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 96
				*/
				if (name == "IsAttached")
				{
					return new Bool(b.IsAttached);
				}
				if (name == "PendingAttachment")
				{
					return new Bool(b.PendingAttachment);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyProductionBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyProductionBlock;
				if (name == "MoveQueueItemRequest")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("MoveQueueItemRequest expects 2 parameters"); }
						if (!(args[0] is Integer)) { throw new Exception("MoveQueueItemRequest expects argument 0 to be of type Integer"); }
						if (!(args[1] is Integer)) { throw new Exception("MoveQueueItemRequest expects argument 1 to be of type Integer"); }
						b.MoveQueueItemRequest((uint)(args[0] as Integer).Value, (args[1] as Integer).Value);
						return new Bool(true);
					});
				}
				if (name == "IsProducing")
				{
					return new Bool(b.IsProducing);
				}
				if (name == "IsQueueEmpty")
				{
					return new Bool(b.IsQueueEmpty);
				}
				if (name == "NextItemId")
				{
					return new Integer(b.NextItemId);
				}
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyReactor)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyReactor;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
				if (name == "CurrentOutput")
				{
					return new Float(b.CurrentOutput);
				}
				if (name == "MaxOutput")
				{
					return new Float(b.MaxOutput);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMySensorBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMySensorBlock;
				if (name == "MaxRange")
				{
					return new Float(b.MaxRange);
				}
				if (name == "LeftExtend")
				{
					return new Float(b.LeftExtend);
				}
				if (name == "RightExtend")
				{
					return new Float(b.RightExtend);
				}
				if (name == "TopExtend")
				{
					return new Float(b.TopExtend);
				}
				if (name == "BottomExtend")
				{
					return new Float(b.BottomExtend);
				}
				if (name == "FrontExtend")
				{
					return new Float(b.FrontExtend);
				}
				if (name == "BackExtend")
				{
					return new Float(b.BackExtend);
				}
				if (name == "PlayProximitySound")
				{
					return new Bool(b.PlayProximitySound);
				}
				if (name == "DetectPlayers")
				{
					return new Bool(b.DetectPlayers);
				}
				if (name == "DetectFloatingObjects")
				{
					return new Bool(b.DetectFloatingObjects);
				}
				if (name == "DetectSmallShips")
				{
					return new Bool(b.DetectSmallShips);
				}
				if (name == "DetectLargeShips")
				{
					return new Bool(b.DetectLargeShips);
				}
				if (name == "DetectStations")
				{
					return new Bool(b.DetectStations);
				}
				if (name == "DetectAsteroids")
				{
					return new Bool(b.DetectAsteroids);
				}
				if (name == "DetectOwner")
				{
					return new Bool(b.DetectOwner);
				}
				if (name == "DetectFriendly")
				{
					return new Bool(b.DetectFriendly);
				}
				if (name == "DetectNeutral")
				{
					return new Bool(b.DetectNeutral);
				}
				if (name == "DetectEnemy")
				{
					return new Bool(b.DetectEnemy);
				}
				if (name == "IsActive")
				{
					return new Bool(b.IsActive);
				}
				/*
					if(name == "LastDetectedEntity")
					{
				System.Exception: Missing Type: VRage.ModAPI.IMyEntity
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 96
				*/
			}
			if (block is Sandbox.ModAPI.Ingame.IMyShipDrill)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyShipDrill;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyShipToolBase)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyShipToolBase;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyShipWelder)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyShipWelder;
				if (name == "HelpOthers")
				{
					return new Bool(b.HelpOthers);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyThrust)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyThrust;
				if (name == "ThrustOverride")
				{
					return new Float(b.ThrustOverride);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyRadioAntenna)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyRadioAntenna;
				if (name == "Radius")
				{
					return new Float(b.Radius);
				}
				if (name == "ShowShipName")
				{
					return new Bool(b.ShowShipName);
				}
				if (name == "IsBroadcasting")
				{
					return new Bool(b.IsBroadcasting);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyAssembler)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyAssembler;
				if (name == "DisassembleEnabled")
				{
					return new Bool(b.DisassembleEnabled);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyBatteryBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyBatteryBlock;
				if (name == "HasCapacityRemaining")
				{
					return new Bool(b.HasCapacityRemaining);
				}
				if (name == "CurrentStoredPower")
				{
					return new Float(b.CurrentStoredPower);
				}
				if (name == "MaxStoredPower")
				{
					return new Float(b.MaxStoredPower);
				}
				if (name == "CurrentInput")
				{
					return new Float(b.CurrentInput);
				}
				if (name == "CurrentOutput")
				{
					return new Float(b.CurrentOutput);
				}
				if (name == "IsCharging")
				{
					return new Bool(b.IsCharging);
				}
				if (name == "OnlyRecharge")
				{
					return new Bool(b.OnlyRecharge);
				}
				if (name == "OnlyDischarge")
				{
					return new Bool(b.OnlyDischarge);
				}
				if (name == "SemiautoEnabled")
				{
					return new Bool(b.SemiautoEnabled);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyBeacon)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyBeacon;
				if (name == "Radius")
				{
					return new Float(b.Radius);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyCameraBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyCameraBlock;
			}
			if (block is Sandbox.ModAPI.Ingame.IMyCollector)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyCollector;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyUserControllableGun)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyUserControllableGun;
				if (name == "IsShooting")
				{
					return new Bool(b.IsShooting);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyLargeTurretBase)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyLargeTurretBase;
				/*
					if(name == "TrackTarget")
					{
						return new NativeFunction(args => {
							if(args.Count != 1){throw new Exception("TrackTarget expects 1 parameters");}
				System.Exception: Missing Type: VRage.ModAPI.IMyEntity
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				/*
					if(name == "TrackTarget")
					{
						return new NativeFunction(args => {
							if(args.Count != 2){throw new Exception("TrackTarget expects 2 parameters");}
				System.Exception: Missing Type: VRageMath.Vector3D
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				/*
					if(name == "SetTarget")
					{
						return new NativeFunction(args => {
							if(args.Count != 1){throw new Exception("SetTarget expects 1 parameters");}
				System.Exception: Missing Type: VRage.ModAPI.IMyEntity
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				/*
					if(name == "SetTarget")
					{
						return new NativeFunction(args => {
							if(args.Count != 1){throw new Exception("SetTarget expects 1 parameters");}
				System.Exception: Missing Type: VRageMath.Vector3D
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				if (name == "SyncElevation")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("SyncElevation expects 0 parameters"); }
						b.SyncElevation();
						return new Bool(true);
					});
				}
				if (name == "SyncAzimuth")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("SyncAzimuth expects 0 parameters"); }
						b.SyncAzimuth();
						return new Bool(true);
					});
				}
				if (name == "SyncEnableIdleRotation")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("SyncEnableIdleRotation expects 0 parameters"); }
						b.SyncEnableIdleRotation();
						return new Bool(true);
					});
				}
				if (name == "ResetTargetingToDefault")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("ResetTargetingToDefault expects 0 parameters"); }
						b.ResetTargetingToDefault();
						return new Bool(true);
					});
				}
				if (name == "IsUnderControl")
				{
					return new Bool(b.IsUnderControl);
				}
				if (name == "CanControl")
				{
					return new Bool(b.CanControl);
				}
				if (name == "Range")
				{
					return new Float(b.Range);
				}
				if (name == "Elevation")
				{
					return new Float(b.Elevation);
				}
				if (name == "Azimuth")
				{
					return new Float(b.Azimuth);
				}
				if (name == "EnableIdleRotation")
				{
					return new Bool(b.EnableIdleRotation);
				}
				if (name == "AIEnabled")
				{
					return new Bool(b.AIEnabled);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyLightingBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyLightingBlock;
				if (name == "Radius")
				{
					return new Float(b.Radius);
				}
				if (name == "Intensity")
				{
					return new Float(b.Intensity);
				}
				if (name == "BlinkIntervalSeconds")
				{
					return new Float(b.BlinkIntervalSeconds);
				}
				if (name == "BlinkLenght")
				{
					return new Float(b.BlinkLenght);
				}
				if (name == "BlinkOffset")
				{
					return new Float(b.BlinkOffset);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyMotorAdvancedStator)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyMotorAdvancedStator;
			}
			if (block is Sandbox.ModAPI.Ingame.IMyMotorSuspension)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyMotorSuspension;
				if (name == "Steering")
				{
					return new Bool(b.Steering);
				}
				if (name == "Propulsion")
				{
					return new Bool(b.Propulsion);
				}
				if (name == "InvertSteer")
				{
					return new Bool(b.InvertSteer);
				}
				if (name == "InvertPropulsion")
				{
					return new Bool(b.InvertPropulsion);
				}
				if (name == "Damping")
				{
					return new Float(b.Damping);
				}
				if (name == "Strength")
				{
					return new Float(b.Strength);
				}
				if (name == "Friction")
				{
					return new Float(b.Friction);
				}
				if (name == "Power")
				{
					return new Float(b.Power);
				}
				if (name == "Height")
				{
					return new Float(b.Height);
				}
				if (name == "SteerAngle")
				{
					return new Float(b.SteerAngle);
				}
				if (name == "MaxSteerAngle")
				{
					return new Float(b.MaxSteerAngle);
				}
				if (name == "SteerSpeed")
				{
					return new Float(b.SteerSpeed);
				}
				if (name == "SteerReturnSpeed")
				{
					return new Float(b.SteerReturnSpeed);
				}
				if (name == "SuspensionTravel")
				{
					return new Float(b.SuspensionTravel);
				}
				if (name == "Brake")
				{
					return new Bool(b.Brake);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyOreDetector)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyOreDetector;
				if (name == "Range")
				{
					return new Float(b.Range);
				}
				if (name == "BroadcastUsingAntennas")
				{
					return new Bool(b.BroadcastUsingAntennas);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyOxygenTank)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyOxygenTank;
				if (name == "GetOxygenLevel")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("GetOxygenLevel expects 0 parameters"); }
						return new Float(b.GetOxygenLevel());
					});
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyProgrammableBlock)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyProgrammableBlock;
				if (name == "TryRun")
				{
					return new NativeFunction(args => {
						if (args.Count != 1) { throw new Exception("TryRun expects 1 parameters"); }
						if (!(args[0] is String)) { throw new Exception("TryRun expects argument 0 to be of type String"); }
						return new Bool(b.TryRun((args[0] as String).Value));
					});
				}
				if (name == "IsRunning")
				{
					return new Bool(b.IsRunning);
				}
				if (name == "TerminalRunArgument")
				{
					return new String(b.TerminalRunArgument);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyProjector)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyProjector;
				if (name == "LoadRandomBlueprint")
				{
					return new NativeFunction(args => {
						if (args.Count != 1) { throw new Exception("LoadRandomBlueprint expects 1 parameters"); }
						if (!(args[0] is String)) { throw new Exception("LoadRandomBlueprint expects argument 0 to be of type String"); }
						return new Bool(b.LoadRandomBlueprint((args[0] as String).Value));
					});
				}
				if (name == "LoadBlueprint")
				{
					return new NativeFunction(args => {
						if (args.Count != 1) { throw new Exception("LoadBlueprint expects 1 parameters"); }
						if (!(args[0] is String)) { throw new Exception("LoadBlueprint expects argument 0 to be of type String"); }
						return new Bool(b.LoadBlueprint((args[0] as String).Value));
					});
				}
				if (name == "ProjectionOffsetX")
				{
					return new Integer(b.ProjectionOffsetX);
				}
				if (name == "ProjectionOffsetY")
				{
					return new Integer(b.ProjectionOffsetY);
				}
				if (name == "ProjectionOffsetZ")
				{
					return new Integer(b.ProjectionOffsetZ);
				}
				if (name == "ProjectionRotX")
				{
					return new Integer(b.ProjectionRotX);
				}
				if (name == "ProjectionRotY")
				{
					return new Integer(b.ProjectionRotY);
				}
				if (name == "ProjectionRotZ")
				{
					return new Integer(b.ProjectionRotZ);
				}
				if (name == "RemainingBlocks")
				{
					return new Integer(b.RemainingBlocks);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyRefinery)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyRefinery;
			}
			if (block is Sandbox.ModAPI.Ingame.IMyReflectorLight)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyReflectorLight;
			}
			if (block is Sandbox.ModAPI.Ingame.IMyShipConnector)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyShipConnector;
				if (name == "ThrowOut")
				{
					return new Bool(b.ThrowOut);
				}
				if (name == "CollectAll")
				{
					return new Bool(b.CollectAll);
				}
				if (name == "IsLocked")
				{
					return new Bool(b.IsLocked);
				}
				if (name == "IsConnected")
				{
					return new Bool(b.IsConnected);
				}
				if (name == "OtherConnector")
				{
					return new Block(b.OtherConnector);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyShipGrinder)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyShipGrinder;
			}
			if (block is Sandbox.ModAPI.Ingame.IMySmallGatlingGun)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMySmallGatlingGun;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMySmallMissileLauncher)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMySmallMissileLauncher;
				if (name == "UseConveyorSystem")
				{
					return new Bool(b.UseConveyorSystem);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMySmallMissileLauncherReload)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMySmallMissileLauncherReload;
			}
			if (block is Sandbox.ModAPI.Ingame.IMyTextPanel)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyTextPanel;
				if (name == "WritePublicText")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("WritePublicText expects 2 parameters"); }
						if (!(args[0] is String)) { throw new Exception("WritePublicText expects argument 0 to be of type String"); }
						if (!(args[1] is Bool)) { throw new Exception("WritePublicText expects argument 1 to be of type Bool"); }
						return new Bool(b.WritePublicText((args[0] as String).Value, (args[1] as Bool).Value));
					});
				}
				if (name == "GetPublicText")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("GetPublicText expects 0 parameters"); }
						return new String(b.GetPublicText());
					});
				}
				if (name == "WritePublicTitle")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("WritePublicTitle expects 2 parameters"); }
						if (!(args[0] is String)) { throw new Exception("WritePublicTitle expects argument 0 to be of type String"); }
						if (!(args[1] is Bool)) { throw new Exception("WritePublicTitle expects argument 1 to be of type Bool"); }
						return new Bool(b.WritePublicTitle((args[0] as String).Value, (args[1] as Bool).Value));
					});
				}
				if (name == "GetPublicTitle")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("GetPublicTitle expects 0 parameters"); }
						return new String(b.GetPublicTitle());
					});
				}
				if (name == "WritePrivateText")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("WritePrivateText expects 2 parameters"); }
						if (!(args[0] is String)) { throw new Exception("WritePrivateText expects argument 0 to be of type String"); }
						if (!(args[1] is Bool)) { throw new Exception("WritePrivateText expects argument 1 to be of type Bool"); }
						return new Bool(b.WritePrivateText((args[0] as String).Value, (args[1] as Bool).Value));
					});
				}
				if (name == "GetPrivateText")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("GetPrivateText expects 0 parameters"); }
						return new String(b.GetPrivateText());
					});
				}
				if (name == "WritePrivateTitle")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("WritePrivateTitle expects 2 parameters"); }
						if (!(args[0] is String)) { throw new Exception("WritePrivateTitle expects argument 0 to be of type String"); }
						if (!(args[1] is Bool)) { throw new Exception("WritePrivateTitle expects argument 1 to be of type Bool"); }
						return new Bool(b.WritePrivateTitle((args[0] as String).Value, (args[1] as Bool).Value));
					});
				}
				if (name == "GetPrivateTitle")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("GetPrivateTitle expects 0 parameters"); }
						return new String(b.GetPrivateTitle());
					});
				}
				if (name == "AddImageToSelection")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("AddImageToSelection expects 2 parameters"); }
						if (!(args[0] is String)) { throw new Exception("AddImageToSelection expects argument 0 to be of type String"); }
						if (!(args[1] is Bool)) { throw new Exception("AddImageToSelection expects argument 1 to be of type Bool"); }
						b.AddImageToSelection((args[0] as String).Value, (args[1] as Bool).Value);
						return new Bool(true);
					});
				}
				/*
					if(name == "AddImagesToSelection")
					{
						return new NativeFunction(args => {
							if(args.Count != 2){throw new Exception("AddImagesToSelection expects 2 parameters");}
				System.Exception: Missing Type: System.Collections.Generic.List`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				if (name == "RemoveImageFromSelection")
				{
					return new NativeFunction(args => {
						if (args.Count != 2) { throw new Exception("RemoveImageFromSelection expects 2 parameters"); }
						if (!(args[0] is String)) { throw new Exception("RemoveImageFromSelection expects argument 0 to be of type String"); }
						if (!(args[1] is Bool)) { throw new Exception("RemoveImageFromSelection expects argument 1 to be of type Bool"); }
						b.RemoveImageFromSelection((args[0] as String).Value, (args[1] as Bool).Value);
						return new Bool(true);
					});
				}
				/*
					if(name == "RemoveImagesFromSelection")
					{
						return new NativeFunction(args => {
							if(args.Count != 2){throw new Exception("RemoveImagesFromSelection expects 2 parameters");}
				System.Exception: Missing Type: System.Collections.Generic.List`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				if (name == "ClearImagesFromSelection")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("ClearImagesFromSelection expects 0 parameters"); }
						b.ClearImagesFromSelection();
						return new Bool(true);
					});
				}
				/*
					if(name == "GetSelectedImages")
					{
						return new NativeFunction(args => {
							if(args.Count != 1){throw new Exception("GetSelectedImages expects 1 parameters");}
				System.Exception: Missing Type: System.Collections.Generic.List`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				if (name == "ShowPublicTextOnScreen")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("ShowPublicTextOnScreen expects 0 parameters"); }
						b.ShowPublicTextOnScreen();
						return new Bool(true);
					});
				}
				if (name == "ShowPrivateTextOnScreen")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("ShowPrivateTextOnScreen expects 0 parameters"); }
						b.ShowPrivateTextOnScreen();
						return new Bool(true);
					});
				}
				if (name == "ShowTextureOnScreen")
				{
					return new NativeFunction(args => {
						if (args.Count != 0) { throw new Exception("ShowTextureOnScreen expects 0 parameters"); }
						b.ShowTextureOnScreen();
						return new Bool(true);
					});
				}
				/*
					if(name == "SetShowOnScreen")
					{
						return new NativeFunction(args => {
							if(args.Count != 1){throw new Exception("SetShowOnScreen expects 1 parameters");}
				System.Exception: Missing Type: VRage.Game.GUI.TextPanel.ShowTextOnScreenFlag
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 69
				*/
				if (name == "CurrentlyShownImage")
				{
					return new String(b.CurrentlyShownImage);
				}
				/*
					if(name == "ShowOnScreen")
					{
				System.Exception: Missing Type: VRage.Game.GUI.TextPanel.ShowTextOnScreenFlag
				   at InterfaceGenerator.InterfaceGeneratorMain.MatchType(Type t) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 139
				   at InterfaceGenerator.InterfaceGeneratorMain.DumpType(Type t, StreamWriter code) in c:\users\andrew.leap\documents\visual studio 2015\Projects\InterfaceGenerator\InterfaceGenerator\Class1.cs:line 96
				*/
				if (name == "ShowText")
				{
					return new Bool(b.ShowText);
				}
			}
			if (block is Sandbox.ModAPI.Ingame.IMyJumpDrive)
			{
				var b = block as Sandbox.ModAPI.Ingame.IMyJumpDrive;
			}

			#endregion

			var action = block.GetActionWithName(name);
			if (action != null)
			{
				return new NativeFunction((args) =>
				{
					action.Apply(block);
					return null;
				});
			}
			var property = block.GetProperty(name);

			if (property != null)
			{
				switch (property.TypeName)
				{
					case "Bool":
						return new Bool(property.AsBool().GetValue(block));
					case "Single":
						return new Float(property.AsFloat().GetValue(block));
					case "Color":
						var c = property.AsColor().GetValue(block);
						return new Color(c.R, c.G, c.B, c.A);
				}
			}
			throw new Exception("Not Implemented");
        }

        public void SetField(Scope scope, State state, string name, IType value)
        {
            var property = block.GetProperty(name);
            if (property != null)
            {
                switch (property.TypeName)
                {
                    case "Bool":
                        property.AsBool().SetValue(block, value.Cast<Bool>().Value);
                        return;
                    case "Single":
                        property.AsFloat().SetValue(block, value.Cast<Float>().Value);
						return;
                    case "Color":
                        var c = value.Cast<Color>();
                        property.AsColor().SetValue(block, new VRageMath.Color(c.R, c.G, c.B, c.A));
						return;
                }
				throw new Exception("Unexpected property type: " + property.TypeName);
            }
            throw new Exception("Block does not have property: " + name);
        }
    }
}
